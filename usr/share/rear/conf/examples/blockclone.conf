# Example blockclone.conf file used to make an image of the (USB) disk of a Raspberry Pi (RPi)
#
# The OUTPUT must be defined - PXE is currently the only one working with RPi
OUTPUT=PXE
# However, when you do not care about actually using PXE to restore define the OUTPUT_URL=null
OUTPUT_URL=null
# The location to store the disk image of our RPi - in this example on our local NAS storage
BACKUP_URL=nfs://nas/volume1/RearSpace

BACKUP=BLOCKCLONE                                        # Define BLOCKCLONE as backup method
BACKUP_PROG_ARCHIVE="$(hostname -s)"                     # Name of image file (usually the hostname)
BACKUP_PROG_SUFFIX=".dd.img"                             # Suffix of image file (dd.img indicates we use 'dd')
BACKUP_PROG_COMPRESS_SUFFIX=""                           # Don't use additional suffixes (keep this one EMPTY)

BLOCKCLONE_PROG="dd"                                     # Use dd for image creation
BLOCKCLONE_PROG_OPTS="bs=4k"                             # Additional options that will be passed to dd
BLOCKCLONE_COMPRESSION_PROGRAM="gzip"                    # Compress the image (optional - use gzip, ...) [only with 'dd']
BLOCKCLONE_COMPRESSION_PROGRAM_OPTIONS="-9"              # Options needed by the compress program (default empty)
BLOCKCLONE_SOURCE_DEV="/dev/sda"                         # Device that should be backed up [please double check!!]

# We will add the compress suffix to the BACKUP_PROG_SUFFIX variable when
# variable BLOCKCLONE_COMPRESS_WITH was defined. Keep in mind that this is only valid in combination with 'dd'
case $BLOCKCLONE_COMPRESSION_PROGRAM in
   gzip) BACKUP_PROG_SUFFIX+=".gz"  ;;
     xz) BACKUP_PROG_SUFFIX+=".xz"  ;;
  bzip2) BACKUP_PROG_SUFFIX+=".bz2" ;;
   zstd) BACKUP_PROG_SUFFIX+=".zst" ;;
esac

# We do not care about the MBR on Raspberry PI as we 'dd' the complete disk image
BLOCKCLONE_SAVE_MBR_DEV=""                               # Device where partitioning information is stored (optional)
BLOCKCLONE_MBR_FILE=""                                   # Output filename for boot strap code
BLOCKCLONE_PARTITIONS_CONF_FILE=""                       # Output filename for partition configuration

# We need to define "yes" with variable BLOCKCLONE_ALLOW_MOUNTED as device is mounted when we run ReaR
BLOCKCLONE_ALLOW_MOUNTED="yes"                           # Device can be mounted during backup (default NO)

# To restore/recover our disk image from our NAS server we did the following:
# The NAS server has an USB port where we could insert an USB key of the same size. Keep in mind that to restore
# we need the same or bigger size than the original disk size. This will not be verified on-front as it is up
# to you to take care of this pre-requisite.
# If the inserted USB stick got mounted on the NAS server unmount it first, but make sure you got the right
# disk name of this USB stick, e.g. /dev/sdq

# Then we did the following:
# BACKUP_PROG_ARCHIVE="use the hostname of the RPi"
# gzip -dc /volume1/RearSpace/$BACKUP_PROG_ARCHIVE/$BACKUP_PROG_ARCHIVE.dd.img.gz | dd bs=4k of=/dev/sdq
# We used the recovered USB stick to boot up the RPi successfully.

# Real example run:
# $ sudo parted /dev/sda print
# Model:  USB  SanDisk 3.2Gen1 (scsi)
# Disk /dev/sda: 123GB
# Sector size (logical/physical): 512B/512B
# Partition Table: msdos
# Disk Flags:
# 
# Number  Start   End    Size   Type     File system  Flags
#  1      1049kB  538MB  537MB  primary  fat32        boot, lba
#  2      538MB   123GB  123GB  primary  ext4

# $ sudo usr/sbin/rear -v -C blockclone mkbackuponly
# Relax-and-Recover 2.7 / Git
# Running rear mkbackuponly (PID 2990 date 2025-01-02 10:00:49)
# Using log file: /home/gdha/projects/rear/var/log/rear/rear-n6.2990.log
# Sourcing additional configuration file '/home/gdha/projects/rear/etc/rear/blockclone.conf'
# Running workflow mkbackuponly on the normal/original system
# Using backup archive '/var/tmp/rear.f0AVrIGqsyayNee/outputfs/n6/n6.dd.img.gz'
# Using autodetected kernel '/boot/vmlinuz-6.11.0-1005-raspi' as kernel in the recovery system
# Creating disk layout
# Using guessed bootloader 'ARM'. Skipping bootloader backup, see default.conf about 'BOOTLOADER'
# Verifying that the entries in /var/tmp/rear.f0AVrIGqsyayNee/tmp/backuplayout.conf are correct
# Created disk layout (check the results in /var/tmp/rear.f0AVrIGqsyayNee/tmp/backuplayout.conf)
# Creating /var/tmp/rear.f0AVrIGqsyayNee/outputfs/n6/n6.dd.img.gz from /dev/sda using dd
# BLOCKCLONE was made on mounted device.
# Backup might be inconsistent.
# Exiting rear mkbackuponly (PID 2990) and its descendant processes ...
# Running exit tasks

# On our NAS we have the result image as:
# $ ls -l /volume1/RearSpace/n6/n6.dd.img.gz
# -rw-r--r-- 1 admin users 7955074373 Jan  2 11:46 /volume1/RearSpace/n6/n6.dd.img.gz
